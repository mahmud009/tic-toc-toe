{"version":3,"sources":["components/square.jsx","components/board.jsx","components/game.jsx","App.js","serviceWorker.js","index.js"],"names":["Square","props","className","onClick","value","Board","state","i","this","squares","winner","status","renderSquare","Component","calculateWinner","lines","length","a","b","c","Game","history","Array","fill","xIsNext","stepNumber","slice","current","setState","concat","move","moves","map","step","info","key","jumpTo","handleClick","reset","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7995be3d.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nfunction Square(props) {\r\n  return (\r\n    <div\r\n      className=\"square d-flex align-items-center justify-content-center\"\r\n      onClick={props.onClick}\r\n    >\r\n      {props.value}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Square;\r\n","import React, { Component } from \"react\";\r\nimport Square from \"./square\";\r\n\r\nclass Board extends Component {\r\n  state = {};\r\n\r\n  renderSquare(i) {\r\n    return (\r\n      <Square\r\n        value={this.props.squares[i]}\r\n        onClick={() => this.props.onClick(i)}\r\n      />\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"board p-3\">\r\n        <div className={this.props.winner ? \"status-win\" : \"status\"}>\r\n          {this.props.status}\r\n        </div>\r\n        <div className=\"board-row\">\r\n          {this.renderSquare(0)}\r\n          {this.renderSquare(1)}\r\n          {this.renderSquare(2)}\r\n        </div>\r\n        <div className=\"board-row\">\r\n          {this.renderSquare(3)}\r\n          {this.renderSquare(4)}\r\n          {this.renderSquare(5)}\r\n        </div>\r\n        <div className=\"board-row\">\r\n          {this.renderSquare(6)}\r\n          {this.renderSquare(7)}\r\n          {this.renderSquare(8)}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Board;\r\n","import React, { Component } from \"react\";\r\nimport Board from \"./board\";\r\nclass Game extends Component {\r\n  state = {\r\n    history: [{ squares: Array(9).fill(null) }],\r\n    xIsNext: true,\r\n    stepNumber: 0\r\n  };\r\n\r\n  handleClick(i) {\r\n    let history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n    let current = history[history.length - 1];\r\n    let squares = [...current.squares];\r\n    if (calculateWinner(squares) || squares[i]) {\r\n      return;\r\n    }\r\n    squares[i] = this.state.xIsNext ? \"X\" : \"O\";\r\n    this.setState({\r\n      history: history.concat([{ squares }]),\r\n      xIsNext: !this.state.xIsNext,\r\n      stepNumber: history.length\r\n    });\r\n  }\r\n\r\n  jumpTo(move) {\r\n    this.setState({\r\n      stepNumber: move,\r\n      xIsNext: move % 2 === 0\r\n    });\r\n  }\r\n  reset() {\r\n    this.setState({\r\n      history: [{ squares: Array(9).fill(null) }],\r\n      xIsNext: true,\r\n      stepNumber: 0\r\n    });\r\n  }\r\n  render() {\r\n    let history = this.state.history;\r\n    let current = history[this.state.stepNumber];\r\n\r\n    let moves = history.map((step, move) => {\r\n      let info = move ? `Go to move #${move}` : \"Go to game start\";\r\n      return (\r\n        <li className=\"mb-1\" key={move}>\r\n          <button\r\n            className=\"btn btn-sm btn-success\"\r\n            onClick={() => this.jumpTo(move)}\r\n          >\r\n            {info}\r\n          </button>\r\n        </li>\r\n      );\r\n    });\r\n\r\n    let winner = calculateWinner(current.squares);\r\n    let status;\r\n    if (winner) {\r\n      status = `Winner is : ${winner}`;\r\n    } else {\r\n      status = `Next Player is : ${this.state.xIsNext ? \"X\" : \"O\"}`;\r\n    }\r\n    return (\r\n      <div className=\"game d-flex  align-items-center flex-column\">\r\n        <Board\r\n          squares={current.squares}\r\n          xIsNext={this.state.xIsNext}\r\n          onClick={i => this.handleClick(i)}\r\n          winner={calculateWinner(current.squares)}\r\n          status={status}\r\n        />\r\n        <ol className=\"info-list justify-content-left p-0\">\r\n          <li className=\"mb-1\">\r\n            <button\r\n              className=\"reset-btn btn btn-sm btn-info\"\r\n              onClick={() => this.reset()}\r\n            >\r\n              Reset\r\n            </button>\r\n          </li>\r\n          {moves}\r\n        </ol>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction calculateWinner(squares) {\r\n  let lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6]\r\n  ];\r\n  for (let i = 0; i < lines.length; i++) {\r\n    let [a, b, c] = lines[i];\r\n    if (squares[a] && squares[a] == squares[b] && squares[b] == squares[c]) {\r\n      return squares[a];\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\nexport default Game;\r\n","import React, { Component } from \"react\";\r\nimport Game from \"./components/game\";\r\n\r\nclass App extends Component {\r\n  state = {};\r\n  render() {\r\n    return <Game />;\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}